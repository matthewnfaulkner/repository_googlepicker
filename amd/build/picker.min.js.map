{"version":3,"file":"picker.min.js","sources":["../src/picker.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Google picker js\r\n *\r\n * @copyright   2025 Matthew<matthewfaulkner@apoaevents.com>\r\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/* global gapi, google */\r\ndefine(['core/log'], function(Log) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Initialise the Google Picker flow.\r\n     *\r\n     * @param {string} clientid Google OAuth client ID.\r\n     * @param {string} apikey Google API key.\r\n     * @param {string} appid Google App ID (project number).\r\n     */\r\n    function init(clientid, apikey, appid) {\r\n        Log.debug(clientid, apikey, appid);\r\n        const CLIENT_ID = clientid;\r\n        const API_KEY   = apikey;\r\n        const APP_ID    = appid;\r\n        const DEVELOPER_KEY = API_KEY;\r\n\r\n        let oauthToken = null;\r\n        let pickerApiLoaded = false;\r\n\r\n        /**\r\n         * Called when the Google Auth API is loaded.\r\n         * Triggers authentication to retrieve OAuth token.\r\n         */\r\n        function onAuthApiLoad() {\r\n            Log.debug(CLIENT_ID);\r\n            gapi.auth.authorize(\r\n                {\r\n                    client_id: CLIENT_ID,\r\n                    scope: ['https://www.googleapis.com/auth/drive.file'],\r\n                    immediate: false\r\n                },\r\n                handleAuthResult\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Callback from Google Auth with auth result.\r\n         *\r\n         * @param {Object} authResult The result returned by gapi.auth.authorize.\r\n         */\r\n        function handleAuthResult(authResult) {\r\n            if (authResult && !authResult.error) {\r\n                Log.debug(authResult);\r\n                oauthToken = authResult.access_token;\r\n                createPicker();\r\n            } else {\r\n                Log.debug('Google Picker auth failed: ' + JSON.stringify(authResult));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Called when the Google Picker API is loaded.\r\n         */\r\n        function onPickerApiLoad() {\r\n            pickerApiLoaded = true;\r\n        }\r\n\r\n        /**\r\n         * Builds and shows the Google File Picker.\r\n         */\r\n        function createPicker() {\r\n            Log.debug(pickerApiLoaded);\r\n            Log.debug(oauthToken);\r\n            if (pickerApiLoaded && oauthToken) {\r\n                const view = new google.picker.DocsView()\r\n                    .setIncludeFolders(true)\r\n                    .setSelectFolderEnabled(true);\r\n\r\n                const picker = new google.picker.PickerBuilder()\r\n                    .enableFeature(google.picker.Feature.NAV_HIDDEN)\r\n                    .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)\r\n                    .setAppId(APP_ID)\r\n                    .setOAuthToken(oauthToken)\r\n                    .setDeveloperKey(DEVELOPER_KEY)\r\n                    .addView(view)\r\n                    .setCallback(pickerCallback)\r\n                    .build();\r\n\r\n                picker.setVisible(true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Callback when a file is picked.\r\n         *\r\n         * @param {Object} data Picker response data.\r\n         */\r\n        function pickerCallback(data) {\r\n            if (data.action === google.picker.Action.PICKED) {\r\n                const doc = data.docs[0];\r\n                Log.debug('Picked file: ' + JSON.stringify(doc));\r\n\r\n                // TODO: Call Moodle filepicker API here, e.g.:\r\n                // window.parent.M.core_filepicker.select_file(doc);\r\n            }\r\n        }\r\n\r\n        // Load Google APIs\r\n        gapi.load('auth', {'callback': onAuthApiLoad});\r\n        gapi.load('picker', {'callback': onPickerApiLoad});\r\n    }\r\n\r\n    return { init: init };\r\n});\r\n"],"names":["define","Log","init","clientid","apikey","appid","debug","CLIENT_ID","APP_ID","DEVELOPER_KEY","oauthToken","pickerApiLoaded","handleAuthResult","authResult","error","access_token","view","google","picker","DocsView","setIncludeFolders","setSelectFolderEnabled","PickerBuilder","enableFeature","Feature","NAV_HIDDEN","MULTISELECT_ENABLED","setAppId","setOAuthToken","setDeveloperKey","addView","setCallback","pickerCallback","build","setVisible","createPicker","JSON","stringify","data","action","Action","PICKED","doc","docs","gapi","load","auth","authorize","client_id","scope","immediate"],"mappings":";;;;;;AAuBAA,wCAAO,CAAC,aAAa,SAASC,WAuGnB,CAAEC,cA7FKC,SAAUC,OAAQC,OAC5BJ,IAAIK,MAAMH,SAAUC,OAAQC,aACtBE,UAAYJ,SAEZK,OAAYH,MACZI,cAFYL,WAIdM,WAAa,KACbC,iBAAkB,WAuBbC,iBAAiBC,YAClBA,aAAeA,WAAWC,OAC1Bb,IAAIK,MAAMO,YACVH,WAAaG,WAAWE,2BAkB5Bd,IAAIK,MAAMK,iBACVV,IAAIK,MAAMI,YACNC,iBAAmBD,WAAY,OACzBM,MAAO,IAAIC,OAAOC,OAAOC,UAC1BC,mBAAkB,GAClBC,wBAAuB,IAEb,IAAIJ,OAAOC,OAAOI,eAC5BC,cAAcN,OAAOC,OAAOM,QAAQC,YACpCF,cAAcN,OAAOC,OAAOM,QAAQE,qBACpCC,SAASnB,QACToB,cAAclB,YACdmB,gBAAgBpB,eAChBqB,QAAQd,MACRe,YAAYC,gBACZC,QAEEC,YAAW,IAlClBC,IAEAlC,IAAIK,MAAM,8BAAgC8B,KAAKC,UAAUxB,sBAyCxDmB,eAAeM,SAChBA,KAAKC,SAAWtB,OAAOC,OAAOsB,OAAOC,OAAQ,OACvCC,IAAMJ,KAAKK,KAAK,GACtB1C,IAAIK,MAAM,gBAAkB8B,KAAKC,UAAUK,OAQnDE,KAAKC,KAAK,OAAQ,qBA1Ed5C,IAAIK,MAAMC,WACVqC,KAAKE,KAAKC,UACN,CACIC,UAAWzC,UACX0C,MAAO,CAAC,8CACRC,WAAW,GAEftC,qBAoERgC,KAAKC,KAAK,SAAU,qBA7ChBlC,iBAAkB"}