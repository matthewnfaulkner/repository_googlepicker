{"version":3,"file":"picker.min.js","sources":["../src/picker.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Google picker js\r\n *\r\n * @copyright   2025 Matthew<matthewfaulkner@apoaevents.com>\r\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/* global gapi, google */\r\ndefine(['core/log', 'core/str'], function(Log, String) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Initialise the Google Picker flow.\r\n     *\r\n     * @param {string} token Google OAuth client ID.\r\n     * @param {string} apikey Google API key.\r\n     * @param {string} appid Google App ID (project number).\r\n     * @param {string} sesskey session key.\r\n     * @param {string} secret secret key.\r\n     * @param {string} mimetypes restrict to these mimetypes\r\n     */\r\n    function init(token, apikey, appid, sesskey, secret, mimetypes) {\r\n        const API_KEY   = apikey;\r\n        const APP_ID    = appid;\r\n        const DEVELOPER_KEY = API_KEY;\r\n        const SESSKEY = sesskey;\r\n        const SECRET = secret;\r\n        const MIMETYPES = mimetypes;\r\n\r\n        let oauthToken = token;\r\n        let pickerApiLoaded = false;\r\n\r\n        /**\r\n         * Called when the Google Picker API is loaded.\r\n         */\r\n        function onPickerApiLoad() {\r\n            pickerApiLoaded = true;\r\n            createPicker();\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {string} input\r\n         * @returns\r\n         */\r\n        async function sha1(input) {\r\n            const encoder = new TextEncoder();\r\n            const data = encoder.encode(input);\r\n            const hashBuffer = await crypto.subtle.digest('SHA-1', data);\r\n            const hashArray= Array.from(new Uint8Array(hashBuffer));\r\n            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n\r\n        }\r\n\r\n        /**\r\n         * Builds and shows the Google File Picker.\r\n         */\r\n        function createPicker() {\r\n            if (pickerApiLoaded && oauthToken) {\r\n                const view = new google.picker.DocsView()\r\n                    .setIncludeFolders(true)\r\n                    .setSelectFolderEnabled(false);\r\n\r\n                if(MIMETYPES){\r\n                    view.setMimeTypes(MIMETYPES);\r\n                }\r\n\r\n                const picker = new google.picker.PickerBuilder()\r\n                    .enableFeature(google.picker.Feature.NAV_HIDDEN)\r\n                    .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)\r\n                    .setAppId(APP_ID)\r\n                    .setOAuthToken(oauthToken)\r\n                    .setDeveloperKey(DEVELOPER_KEY)\r\n                    .addView(view)\r\n                    .setCallback(pickerCallback)\r\n                    .build();\r\n\r\n                picker.setVisible(true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks file mimetype is one of valid types.\r\n         *\r\n         * @param {string} mimeType\r\n         * @returns {boolean} whether mimetype is valid\r\n         */\r\n        function validateMimeType(mimeType) {\r\n            const mimeTypeArray = MIMETYPES.split(',').map(s => s.trim());\r\n            return mimeTypeArray.includes(mimeType);\r\n        }\r\n\r\n        /**\r\n         * Callback when a file is picked.\r\n         *\r\n         * @param {Object} data Picker response data.\r\n         */\r\n        function pickerCallback(data) {\r\n\r\n            if (data.action === google.picker.Action.PICKED) {\r\n                const doc = data.docs[0];\r\n\r\n                if(!validateMimeType(doc.mimeType)) {\r\n                    return String.get_string(\"invalidfiletype\", \"repository_googlepicker\")\r\n                        .done(function(s) {\r\n                            window.parent.M.core_filepicker.active_filepicker.display_error(s);\r\n                        });\r\n                }\r\n                doc.exportformat = 'download';\r\n                sha1(JSON.stringify(doc) + SECRET + SESSKEY).then(function(hash){\r\n                    var resource = {};\r\n                    resource.title = doc.name;\r\n                    resource.source = JSON.stringify(doc);\r\n                    resource.sourcekey = hash;\r\n                    resource.thumbnail = doc.iconUrl;\r\n                    resource.author = '';\r\n                    resource.license = \"\";\r\n                    window.parent.M.core_filepicker.select_file(resource);\r\n                });\r\n            }\r\n        }\r\n\r\n        gapi.load('picker', {'callback': onPickerApiLoad});\r\n    }\r\n\r\n    return { init: init };\r\n});\r\n"],"names":["define","Log","String","init","token","apikey","appid","sesskey","secret","mimetypes","APP_ID","DEVELOPER_KEY","SESSKEY","SECRET","MIMETYPES","oauthToken","pickerApiLoaded","pickerCallback","data","action","google","picker","Action","PICKED","doc","docs","mimeType","split","map","s","trim","includes","get_string","done","window","parent","M","core_filepicker","active_filepicker","display_error","exportformat","input","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","b","toString","padStart","join","sha1","JSON","stringify","then","hash","resource","title","name","source","sourcekey","thumbnail","iconUrl","author","license","select_file","gapi","load","view","DocsView","setIncludeFolders","setSelectFolderEnabled","setMimeTypes","PickerBuilder","enableFeature","Feature","NAV_HIDDEN","MULTISELECT_ENABLED","setAppId","setOAuthToken","setDeveloperKey","addView","setCallback","build","setVisible","createPicker"],"mappings":";;;;;;AAuBAA,wCAAO,CAAC,WAAY,aAAa,SAASC,IAAKC,cAqHpC,CAAEC,cAxGKC,MAAOC,OAAQC,MAAOC,QAASC,OAAQC,iBAE3CC,OAAYJ,MACZK,cAFYN,OAGZO,QAAUL,QACVM,OAASL,OACTM,UAAYL,cAEdM,WAAaX,MACbY,iBAAkB,WAmEbC,eAAeC,SAEhBA,KAAKC,SAAWC,OAAOC,OAAOC,OAAOC,OAAQ,OACvCC,IAAMN,KAAKO,KAAK,MAbJC,SAeGF,IAAIE,UAdPZ,UAAUa,MAAM,KAAKC,KAAIC,GAAKA,EAAEC,SACjCC,SAASL,iBAcfxB,OAAO8B,WAAW,kBAAmB,2BACvCC,MAAK,SAASJ,GACXK,OAAOC,OAAOC,EAAEC,gBAAgBC,kBAAkBC,cAAcV,MAG5EL,IAAIgB,aAAe,0BA/DPC,aAEVvB,MADU,IAAIwB,aACCC,OAAOF,OACtBG,iBAAmBC,OAAOC,OAAOC,OAAO,QAAS7B,aACtC8B,MAAMC,KAAK,IAAIC,WAAWN,aAC1BhB,KAAIuB,GAAKA,EAAEC,SAAS,IAAIC,SAAS,EAAG,OAAMC,KAAK,IA2D5DC,CAAKC,KAAKC,UAAUjC,KAAOX,OAASD,SAAS8C,MAAK,SAASC,UACnDC,SAAW,GACfA,SAASC,MAAQrC,IAAIsC,KACrBF,SAASG,OAASP,KAAKC,UAAUjC,KACjCoC,SAASI,UAAYL,KACrBC,SAASK,UAAYzC,IAAI0C,QACzBN,SAASO,OAAS,GAClBP,SAASQ,QAAU,GACnBlC,OAAOC,OAAOC,EAAEC,gBAAgBgC,YAAYT,iBA9B9BlC,SAmC1B4C,KAAKC,KAAK,SAAU,qBAtFhBvD,iBAAkB,gBAsBdA,iBAAmBD,WAAY,OACzByD,MAAO,IAAIpD,OAAOC,OAAOoD,UAC1BC,mBAAkB,GAClBC,wBAAuB,GAEzB7D,WACC0D,KAAKI,aAAa9D,YAGP,IAAIM,OAAOC,OAAOwD,eAC5BC,cAAc1D,OAAOC,OAAO0D,QAAQC,YACpCF,cAAc1D,OAAOC,OAAO0D,QAAQE,qBACpCC,SAASxE,QACTyE,cAAcpE,YACdqE,gBAAgBzE,eAChB0E,QAAQb,MACRc,YAAYrE,gBACZsE,QAEEC,YAAW,IAxCtBC"}